enum STATUS{
    ACTIVE
    INACTIVE
}

enum CONSTANT_TYPE{
    LOW  
    MEDIUM  
    HIGH  
}

type Constant{
    id:ID!
    value: Float!
    type: CONSTANT_TYPE!
}

type BillingItem {
    id:ID!
    title:String
    billing: Billing
}

type Billing{
    id: ID!
    fromDate: Int
    toDate: Int
    title: String
    description: String
    billingItems: [BillingItem!]
}
type UserList {
    items: [User!]!
    totalCount: Int!
}
type BillingList {
    items: [Billing!]!
    totalCount: Int!
}

type User {
    id: ID!
    firstName:String
    lastName:String
    email:String
    status: STATUS
    billingsItems: [BillingItem!]!
}

input CreateUserInput{
    firstName:String!
    lastName:String!
    email:String!
    status:STATUS!
}
input CreateConstantInput{
    value: Float!
    type: CONSTANT_TYPE!
}

type Query {
    Users(limit: Int, offset:Int): UserList!
    Billings(limit:Int, offset:Int): BillingList!
    BillingItems: [BillingItem!]!
    User(userId: ID!): User
}

type Mutation{
#User
    testMutation:String
    createUser(userData: CreateUserInput!):User
    deleteUser(userId: ID!):ID
#Billing
    # createBilling(billingData: BillingInput):
    createConstant(constantData: CreateConstantInput!): Constant!

}