enum Status{
    ACTIVE
    INACTIVE
}

type BillingItem {
    id:ID!
    title:String
    user: User
    billing: Billing
}

type Billing{
    id: ID!
    fromDate: Int
    toDate: Int
    title: String
    description: String
}
type UserList {
    items: [User!]!
    totalCount: Int!
}
type BillingList {
    items: [Billing!]!
    totalCount: Int!
}


type User {
    id: ID!
    firstName:String
    lastName:String
    email:String
    status: Status
}

input CreateUserInput{
    firstName:String!
    lastName:String!
    email:String!
}

input UUID {
    id:String!
}

type Query {
    testQuery(limit: Int):[User!]!
    getUsers(limit: Int, offset:Int): UserList!
    getBillings(limit:Int, offset:Int): BillingList!
    getBillingItems: [BillingItem!]!
}

type Mutation{
#User
    testMutation:String
    createUser(userData: CreateUserInput!):User
    deleteUser(userID: UUID!):User
#Billing
    # createBilling(billingData: BillingInput):

}